apiVersion: apps/v1
kind: Deployment

metadata:
  # Name of the deployment
  name: backend-deployment

spec:
  progressDeadlineSeconds: 600

  # Number of pod replicas to maintain
  replicas: 3

  # Matches pods labeled as "app: backend"
  selector:
    matchLabels:
      app: backend

  # Template for creating pods
  template:
    metadata:
      # Labels applied to pods created by this deployment
      labels:
        app: backend

    spec:
      # waiting for database to be ready before initializing container
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: [ 'sh', '-c' ]
          args:
            - >
              until nc -z postgres-service 5432;
              do
                echo "Waiting for PostgreSQL to be ready...";
                sleep 2;
              done;
              echo "PostgreSQL is ready!";

      containers:
        - name: backend
          # using the stable version for production
          image: osklot12/spring-backend:stable
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"

            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres-service:5432/tomorrow_db"

            # References the database username from a Kubernetes Secret
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username

            # References the database password from a Kubernetes Secret
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password

            # Specifies the allowed CORS origin
            - name: CORS_ALLOWED_ORIGINS
              value: "34.88.62.168"

          # Checks if the backend service is ready to accept traffic
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          # Checks if the backend service is healthy
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          # Resource requests and limits
          resources:
            requests:
              memory: "128Mi"
              cpu: "10m"
            limits:
              memory: "1Gi"
              cpu: "1"